import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import albumentations as A
import tensorflow.keras.backend as K
import pandas as pd
import plotly.express as px  # <-- –î–æ–±–∞–≤–ª—è–µ–º Plotly
import os
import gdown
import keras.src.models.functional
from keras.models import load_model

st.set_page_config(
    page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="auto"
)

IMG_SIZE = 380
MODEL_PATH = 'model_not_exists.keras' 
GOOGLE_DRIVE_FILE_ID = "1HAF2H6WdPtNd_FTIdFJGrei1wC8GV0KJ"
    
DISEASE_DESCRIPTIONS = {
    'Acitinic Keratosis': {
        'description': '–ê–∫—Ç–∏–Ω–∏—á–µ—Å–∫–∏–π –∫–µ—Ä–∞—Ç–æ–∑ ‚Äî –ø—Ä–µ–¥—Ä–∞–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–∞.',
        'symptoms': '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç—ã–µ, —á–µ—à—É–π—á–∞—Ç—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –∫–æ–∂–µ, —á–∞—â–µ –Ω–∞ –ª–∏—Ü–µ, —É—à–∞—Ö, —Ä—É–∫–∞—Ö.',
        'treatment': '–ö—Ä–∏–æ—Ç–µ—Ä–∞–ø–∏—è, –ª–∞–∑–µ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (5-—Ñ—Ç–æ—Ä—É—Ä–∞—Ü–∏–ª).'
    },
    'Carcinoma': {
        'description': '–ë–∞–∑–∞–ª—å–Ω–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è –∏–ª–∏ –ø–ª–æ—Å–∫–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è –∫–∞—Ä—Ü–∏–Ω–æ–º–∞ ‚Äî —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–∫–∞ –∫–æ–∂–∏.',
        'symptoms': '–ñ–µ–º—á—É–∂–Ω—ã–µ —É–∑–µ–ª–∫–∏, —è–∑–≤—ã, –∫—Ä–∞—Å–Ω—ã–µ —á–µ—à—É–π—á–∞—Ç—ã–µ –ø—è—Ç–Ω–∞.',
        'treatment': '–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –ª—É—á–µ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è, MOHS-—Ö–∏—Ä—É—Ä–≥–∏—è.'
    },
    'Dermatofibroma': {
        'description': '–î–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–∂–∏, —á–∞—â–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–∫—É—Å–æ–≤ –∏–ª–∏ —Ç—Ä–∞–≤–º.',
        'symptoms': '–¢–≤–µ—Ä–¥—ã–π —É–∑–µ–ª–æ–∫ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ –∏–ª–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –æ–±—ã—á–Ω–æ –Ω–∞ –Ω–æ–≥–∞—Ö.',
        'treatment': '–ù–µ —Ç—Ä–µ–±—É–µ—Ç –ª–µ—á–µ–Ω–∏—è, –Ω–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏.'
    },
    'Melanoma': {
        'description': '–°–∞–º—ã–π –æ–ø–∞—Å–Ω—ã–π –≤–∏–¥ —Ä–∞–∫–∞ –∫–æ–∂–∏, –º–æ–∂–µ—Ç –º–µ—Ç–∞—Å—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å.',
        'symptoms': '–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Ä–æ–¥–∏–Ω–∫–∞ —Å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏, –∏–∑–º–µ–Ω—è—é—â–∞—è —Ü–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä.',
        'treatment': '–°—Ä–æ—á–Ω–æ–µ —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –∏–º–º—É–Ω–æ—Ç–µ—Ä–∞–ø–∏—è, —Ç–∞—Ä–≥–µ—Ç–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è.'
    },
    'Nevus': {
        'description': '–û–±—ã—á–Ω–∞—è —Ä–æ–¥–∏–Ω–∫–∞, –¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∫–æ–ø–ª–µ–Ω–∏–µ –º–µ–ª–∞–Ω–æ—Ü–∏—Ç–æ–≤.',
        'symptoms': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ, —á–µ—Ä–Ω—ã–µ –∏–ª–∏ —Ä–æ–∑–æ–≤—ã–µ –ø—è—Ç–Ω–∞, –ø–ª–æ—Å–∫–∏–µ –∏–ª–∏ –≤—ã–ø—É–∫–ª—ã–µ.',
        'treatment': '–û–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ª–µ—á–µ–Ω–∏—è, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.'
    },
    'Seborrheic Keratosis': {
        'description': '–î–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º.',
        'symptoms': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ, —á–µ—Ä–Ω—ã–µ –∏–ª–∏ –∂–µ–ª—Ç—ã–µ "–Ω–∞—Ä–æ—Å—Ç—ã" —Å –≤–æ—Å–∫–æ–≤–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π.',
        'treatment': '–ö—Ä–∏–æ—Ç–µ—Ä–∞–ø–∏—è, –ª–∞–∑–µ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–µ—à–∞—é—Ç.'
    },
    'Vascular Lesion': {
        'description': '–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–≥–µ–º–∞–Ω–≥–∏–æ–º—ã, –∞–Ω–≥–∏–æ–º—ã).',
        'symptoms': '–ö—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ø—è—Ç–Ω–∞, –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø—É–∫–ª—ã–º–∏.',
        'treatment': '–õ–∞–∑–µ—Ä–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è, —Å–∫–ª–µ—Ä–æ—Ç–µ—Ä–∞–ø–∏—è, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.'
    }
}

@tf.keras.utils.register_keras_serializable()
def focal_loss(y_true, y_pred):
    gamma = 2.0
    alpha_list = tf.cast([0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25], tf.float32)
    y_true = tf.cast(y_true, tf.float32)
    y_pred = tf.cast(y_pred, tf.float32)
    y_pred = tf.clip_by_value(y_pred, 1e-7, 1 - 1e-7)
    p_t = y_true * y_pred + (1 - y_true) * (1 - y_pred)
    alpha_factor = y_true * alpha_list + (1 - y_true) * (1 - alpha_list)
    modulating_factor = (1.0 - p_t)**gamma
    loss = -alpha_factor * modulating_factor * K.log(p_t)
    return tf.reduce_sum(loss, axis=-1)

@st.cache_resource
def load_downloaded_model(model_path):
    #if not os.path.exists(MODEL_PATH):
    url = f'https://drive.google.com/uc?id={GOOGLE_DRIVE_FILE_ID}'
    try:
        gdown.download(url, MODEL_PATH, quiet=False)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

    try:
        custom_objects = {'focal_loss': focal_loss}  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        model = load_model(MODEL_PATH, custom_objects=custom_objects)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

model = load_downloaded_model(MODEL_PATH)
classes = list(DISEASE_DESCRIPTIONS.keys())

def preprocess_image(image):
    test_transform = A.Compose([A.Resize(width=IMG_SIZE, height=IMG_SIZE)])
    image = np.array(image)
    transformed = test_transform(image=image)
    return np.expand_dims(transformed['image'], axis=0)

st.title("My skin helper")
st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–∂–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ–µ* –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ.
""")
st.markdown("""
&nbsp;&nbsp;&nbsp;&nbsp;* –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏ –Ω–µ—Å—ë—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
""", unsafe_allow_html=True)

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    try:
        image = Image.open(uploaded_file)
        col1, col2 = st.columns([1, 1])
        
        with col1:
            image_container_width = 600
            image_width = int(image_container_width) * 0.5
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=int(image_width))
            image_height = image.size[1] * (image_width / image.size[0])
        
        with col2:
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                processed_image = preprocess_image(image)
                if model is not None:
                    prediction = model.predict(processed_image)
                    predicted_class = classes[np.argmax(prediction)]
                    confidence = prediction[0][np.argmax(prediction)]
                    
                    df = pd.DataFrame({
                        '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ': classes,
                        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': (prediction[0] * 100).round(2)  
                    })
                    
                    fig = px.bar(
                        df,
                        x='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)',
                        y='–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ',
                        orientation='h',
                        text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)',
                        color='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)',
                        color_continuous_scale='Blues',
                        labels={'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %'},
                    )
                    
                    fig.update_traces(
                        texttemplate='<b>%{text:.2f}%</b>',
                        textposition='outside',
                        hovertemplate='<b>%{y}</b><br>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: <b>%{x:.2f}%</b>',
                        textfont_size=14,
                        marker_line_width=0,
                        textfont=dict(color='white', size=14),
                    )
                    
                    fig.update_layout(
                        height=int(image_height), 
                        showlegend=False,
                        xaxis_title=None,
                        yaxis_title=None,
                        margin=dict(l=0, r=0, t=30, b=0),
                        font=dict(
                            family="Arial",
                            size=14,  # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                            color="black"
                        ),
                        yaxis=dict(
                            tickfont=dict(
                                size=14,  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
                                weight='bold'  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            )
                        ),
                        xaxis=dict(
                            tickfont=dict(
                                size=12  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Å–∏ X
                            )
                        ),
                        plot_bgcolor='rgba(0,0,0,0)',  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                        paper_bgcolor='rgba(0,0,0,0)',
                        hoverlabel=dict(
                            bgcolor="white",
                            font_size=14,
                            font_family="Arial"
                        )
                    )
                    
                    fig.update_traces(width=0.8)
                    
                    st.plotly_chart(fig, use_container_width=True)
        
        st.markdown(f"### –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑: **{predicted_class}** (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {confidence:.2%})")
        
        if predicted_class in ['Melanoma', 'Carcinoma', 'Acitinic Keratosis']:
            st.warning("‚ö†Ô∏è **–°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É!** ‚ö†Ô∏è")
        
        st.markdown("---")
        st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
        for disease, info in DISEASE_DESCRIPTIONS.items():
            with st.expander(f"**{disease}**"):
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}")
                st.markdown(f"**–°–∏–º–ø—Ç–æ–º—ã:** {info['symptoms']}")
                st.markdown(f"**–õ–µ—á–µ–Ω–∏–µ:** {info['treatment']}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
